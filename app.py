import streamlit as st
from textblob import TextBlob
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px # Pour Plotly Express
import re

# --- Configuration de la Page Streamlit ---
st.set_page_config(
    page_title="DuoScan P√©dagogique",
    page_icon="ü¶â",
    layout="wide"
)

# --- Fonctions Utilitaires (inchang√©es) ---
def nettoyer_texte(texte):
    texte = texte.lower()
    return texte

def analyser_sentiment(texte):
    blob = TextBlob(texte)
    polarite = blob.sentiment.polarity
    if polarite > 0.1:
        return "Positif üëç"
    elif polarite < -0.1:
        return "N√©gatif üëé"
    else:
        return "Neutre üòê"

def generer_nuage_mots(textes, titre_section):
    if not textes:
        st.info(f"Pas de donn√©es suffisantes pour g√©n√©rer le nuage de mots {titre_section.lower()}.")
        return

    texte_concatene = " ".join(nettoyer_texte(txt) for txt in textes)
    if not texte_concatene.strip():
        st.info(f"Pas de mots significatifs pour le nuage {titre_section.lower()}.")
        return

    try:
        wordcloud = WordCloud(width=800, height=400, background_color='rgba(255, 255, 255, 0)',
                              collocations=False, prefer_horizontal=0.9).generate(texte_concatene)
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        st.pyplot(fig)
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du nuage de mots '{titre_section}': {e}")

# --- Barre Lat√©rale (Sidebar) ---
with st.sidebar:
    # st.image("https://i.imgur.com/5RfOsTQ.png", width=100) # Ligne de l'image du logo supprim√©e
    st.markdown("# DuoScan P√©dagogique ü¶â")
    st.divider()
    st.markdown("**Master :** Ing√©nierie Technop√©dagogique et Innovation")
    st.markdown("**Module :** Design de l'Exp√©rience d'Apprentissage")
    st.markdown("**Professeur :** M. Adil AMMAR")
    st.markdown("**R√©alis√© par :** EL FILALI Mohamed")
    st.divider()
    st.markdown("### Objectif de l'outil:")
    st.info(
        "Analyser le sentiment des retours utilisateurs de Duolingo "
        "pour identifier des pistes d'am√©lioration "
        "des exp√©riences d'apprentissage num√©rique."
    )
    st.markdown("### Guide Rapide")
    st.markdown("""
    1.  Choisissez la m√©thode d'entr√©e.
    2.  Fournissez les avis Duolingo.
    3.  Cliquez sur "üöÄ Analyser les Avis".
    4.  Explorez les insights !
    """)
    st.divider()
    st.caption(f"¬© {pd.Timestamp.now().year} EL FILALI Mohamed")


# --- Interface Utilisateur Principale ---
st.title("ü¶â DuoScan P√©dagogique")
st.subheader("Analyse des Avis Utilisateurs de Duolingo pour l'Optimisation des Exp√©riences d'Apprentissage")
st.markdown("Bienvenue ! Cet outil vous aide √† sonder le ressenti exprim√© dans les avis Duolingo.")
st.divider()

# --- Section d'Entr√©e des Donn√©es ---
st.header("üì• 1. Soumettre les Avis Duolingo")
input_method = st.radio(
    "Comment souhaitez-vous fournir les avis Duolingo ?",
    ("Coller le texte directement", "T√©l√©charger un fichier (.txt ou .csv)"),
    key="input_method_choice",
    horizontal=True
)

avis_entres_bruts = []

if input_method == "Coller le texte directement":
    avis_texte_area = st.text_area(
        "Collez ici les avis Duolingo (un par ligne) :",
        height=150,
        key="text_area_input",
        placeholder="Exemple : Duolingo m'a vraiment aid√© √† apprendre l'espagnol, c'est ludique !\nParfois, les notifications sont un peu trop insistantes."
    )
    if avis_texte_area:
        avis_entres_bruts = [avis.strip() for avis in avis_texte_area.split('\n') if avis.strip()]

elif input_method == "T√©l√©charger un fichier (.txt ou .csv)":
    uploaded_file = st.file_uploader(
        "S√©lectionnez un fichier .txt (un avis Duolingo par ligne) ou .csv (avec une colonne 'avis' ou une seule colonne)",
        type=["txt", "csv"],
        key="file_uploader_input"
    )
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.txt'):
                avis_entres_bruts = [line.decode('utf-8').strip() for line in uploaded_file if line.decode('utf-8').strip()]
            elif uploaded_file.name.endswith('.csv'):
                df_avis = pd.read_csv(uploaded_file)
                if 'avis' in df_avis.columns:
                    avis_entres_bruts = [str(avis).strip() for avis in df_avis['avis'].dropna().tolist() if str(avis).strip()]
                elif len(df_avis.columns) == 1:
                    avis_entres_bruts = [str(avis).strip() for avis in df_avis.iloc[:, 0].dropna().tolist() if str(avis).strip()]
                else:
                    st.error("Fichier CSV : veuillez fournir une colonne nomm√©e 'avis' ou un fichier avec une seule colonne.")
        except Exception as e:
            st.error(f"‚ö†Ô∏è Erreur lors de la lecture du fichier : {e}")
            st.stop()

# --- Bouton d'Analyse ---
st.divider()
if st.button("üöÄ Analyser les Avis Duolingo", type="primary", use_container_width=True, key="analyze_button"):
    if not avis_entres_bruts:
        st.warning("‚ö†Ô∏è Veuillez fournir des avis Duolingo avant de lancer l'analyse.")
        st.stop()

    st.header("üìä 2. Analyse des Sentiments (Avis Duolingo)")
    with st.spinner("ü¶â Analyse en cours... Un instant, je consulte les chouettes !"):
        avis_analyses = []
        sentiments_counts = {"Positif üëç": 0, "N√©gatif üëé": 0, "Neutre üòê": 0}
        avis_positifs_textes = []
        avis_negatifs_textes = []

        for i, avis_texte in enumerate(avis_entres_bruts):
            sentiment = analyser_sentiment(avis_texte)
            avis_analyses.append({"id": i + 1, "texte_original": avis_texte, "sentiment_detecte": sentiment})
            sentiments_counts[sentiment] += 1
            if sentiment == "Positif üëç":
                avis_positifs_textes.append(avis_texte)
            elif sentiment == "N√©gatif üëé":
                avis_negatifs_textes.append(avis_texte)

        st.toast('Analyse termin√©e ! üéâ', icon='‚úÖ')

        # --- Affichage des Indicateurs Cl√©s ---
        st.subheader("üìà Vue d'Ensemble des Retours sur Duolingo")
        cols_metriques = st.columns(4)
        cols_metriques[0].metric("Total Avis Analys√©s", len(avis_analyses))
        cols_metriques[1].metric("Avis Positifs üëç", sentiments_counts["Positif üëç"])
        cols_metriques[2].metric("Avis N√©gatifs üëé", sentiments_counts["N√©gatif üëé"])
        cols_metriques[3].metric("Avis Neutres üòê", sentiments_counts["Neutre üòê"])

        if sum(sentiments_counts.values()) > 0:
            df_sentiments = pd.DataFrame(list(sentiments_counts.items()), columns=['Sentiment', 'Nombre'])

            sentiment_color_map = {
                "Positif üëç": "#28a745",
                "N√©gatif üëé": "#dc3545",
                "Neutre üòê": "#6c757d"
            }

            fig = px.bar(
                df_sentiments,
                x='Sentiment',
                y='Nombre',
                color='Sentiment',
                color_discrete_map=sentiment_color_map,
                labels={'Nombre': "Nombre d'Avis", 'Sentiment': 'Cat√©gorie de Sentiment'},
                text_auto=True
            )
            fig.update_layout(
                showlegend=False,
                xaxis_title=None,
                yaxis_title="Nombre d'Avis",
                font=dict(family="sans-serif", size=12),
                margin=dict(l=20, r=20, t=30, b=20),
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
            )
            fig.update_traces(textposition='outside')

            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Aucune donn√©e √† afficher dans le graphique.")


        st.divider()
        # --- D√©tail par Avis ---
        with st.expander("üîç Explorer chaque avis Duolingo individuellement", expanded=False):
            if avis_analyses:
                df_details = pd.DataFrame(avis_analyses)
                df_details = df_details[['id', 'sentiment_detecte', 'texte_original']]
                df_details.rename(columns={'id':'ID', 'sentiment_detecte':'Sentiment D√©tect√©', 'texte_original':'Texte de l\'Avis Duolingo'}, inplace=True)
                st.dataframe(df_details, use_container_width=True, hide_index=True)
            else:
                st.info("Aucun avis √† afficher en d√©tail.")

        st.divider()
        # --- Nuages de Mots ---
        st.subheader("‚òÅÔ∏è Termes Fr√©quents dans les Avis Duolingo")
        show_wordclouds = st.checkbox("Afficher les nuages de mots", value=True, key="show_wc")
        if show_wordclouds:
            if not avis_positifs_textes and not avis_negatifs_textes:
                st.info("Pas assez de donn√©es textuelles pour g√©n√©rer les nuages de mots.")
            else:
                tab_positif, tab_negatif = st.tabs(["Termes Positifs", "Termes N√©gatifs"])
                with tab_positif:
                    generer_nuage_mots(avis_positifs_textes, "issus des Avis Positifs")
                with tab_negatif:
                    generer_nuage_mots(avis_negatifs_textes, "issus des Avis N√©gatifs")
        st.divider()

        # --- Section d'Interpr√©tation ---
        st.header("üí° 3. Pistes pour le Design de l'Exp√©rience d'Apprentissage sur Duolingo")
        st.markdown("""
            √Ä partir des sentiments et des termes identifi√©s dans les avis Duolingo :
            * Quels sont les **points forts** per√ßus par les utilisateurs de Duolingo ? (ex: gamification, vari√©t√© des exercices, facilit√© d'acc√®s...)
            * Quelles **frustrations ou difficult√©s** √©mergent ? (ex: syst√®me de vies, publicit√©s, progression, type d'exercices...)
            * Comment ces retours peuvent-ils √©clairer l'application des **principes de design UX pour l'apprentissage** √† Duolingo ?
            * Quelles **recommandations sp√©cifiques** pourriez-vous formuler pour am√©liorer l'exp√©rience p√©dagogique sur Duolingo, en vous basant sur ces donn√©es ?
        """)
        st.text_area(
            "R√©digez ici votre analyse et vos recommandations pour M. AMMAR :",
            height=200,
            key="interpretation_area_detailed",
            placeholder="Exemple : L'analyse sugg√®re que l'aspect ludique de Duolingo est un levier majeur d'engagement. Cependant, la r√©currence de termes n√©gatifs li√©s aux 'publicit√©s' ou aux 'vies' pourrait indiquer des points de friction impactant la pers√©v√©rance..."
        )
else:
    st.info("‚ÑπÔ∏è Pr√™t √† scanner les avis Duolingo ? Fournissez des donn√©es et cliquez sur 'Analyser'.")